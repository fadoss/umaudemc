***
*** Extension of the predefined LTL module to represent probabilistic
*** formulae.
***
*** This is based on templog.maude.
***

*** sload model-checker

fmod PROBABILISTIC-TEMPORAL-LOGIC is
	including LTL .
	protecting NAT .
	protecting FLOAT .

	*** CTL and CTL*
	op A_ : Formula -> Formula [ctor prec 53] .
	op E_ : Formula -> Formula [ctor prec 53] .

	*** bounded step operators
	op _U__ : Formula Bound Formula -> Formula [ctor prec 63 format (d r b o d)] .
	op _R__ : Formula Bound Formula -> Formula [ctor prec 63 format (d r b o d)] .

	op <>__ : Bound Formula -> Formula [prec 53 format (r b o d)] .
	op []__ : Bound Formula -> Formula [prec 53 format (r d b o d)] .
	op _W__ : Bound Formula Formula -> Formula [prec 63 format (d r b o d)] .

	*** bounded probability operator
	op P__ : Bound Formula -> Formula [ctor prec 65 format (r b o d)] .

	*** bounds
	sort Bound .

	op <=_  : Float -> Bound [ctor] .
	op <=_  : Nat -> Bound [ctor] .
	op <_   : Float -> Bound [ctor] .
	op <_   : Nat -> Bound [ctor] .
	op >=_  : Float -> Bound [ctor] .
	op >=_  : Nat -> Bound [ctor] .
	op >_   : Float -> Bound [ctor] .
	op >_   : Nat -> Bound [ctor] .

	vars f g : Formula .

	*** we are not interested in negative normal forms or
	*** canonicial terms
endfm

fmod PROBABILISTIC-TEMPORAL-LOGIC-META is
	protecting META-LEVEL .
	protecting LEXICAL .

	*** Build a module where to parse temporal formulae
	*** (module, tokenized formula)
	op makeParserModule : Module QidList QidList -> Module .

	var  M         : Module .
	vars QL AL     : QidList .
	var  Q         : Qid .
	var  S         : Sort .
	var  Op        : OpDecl .
	vars S1 S2     : SortSet .
	vars Ops1 Ops2 : OpDeclSet .

	eq makeParserModule(M, QL, AL) = smod getName(M) is
		getImports(M)
		(protecting 'PROBABILISTIC-TEMPORAL-LOGIC .)
		sorts SortSet-diff(getSorts(M), upSorts('PROBABILISTIC-TEMPORAL-LOGIC, true)) .
		getSubsorts(M)
		OpDeclSet-diff(getOps(M), upOpDecls('PROBABILISTIC-TEMPORAL-LOGIC, true))
		if hasIntervalBound(QL) then
			(op '`[_`,_`] : 'Nat 'Nat -> 'Bound [ctor] .)
			(op '`[_`,_`] : 'Float 'Float -> 'Bound [ctor] .)
		else none fi
		getMbs(M)
		getEqs(M)
		getRls(M)
		getStrats(M)
		getSds(M)
	endsm .

	*** There may be conflicts in the module generated by makeParserModule
	*** when the module M is flat and includes members declared in
	*** TEMPORAL-LOGIC-TYPE or its imports, so we remove these

	op SortSet-diff : SortSet SortSet -> SortSet .

	eq SortSet-diff(S ; S1, S ; S2) = SortSet-diff(S1, S2) .
	eq SortSet-diff(S1, S2) = S1 [owise] .

	op OpDeclSet-diff : OpDeclSet OpDeclSet -> OpDeclSet .

	eq OpDeclSet-diff(Op Ops1, Op Ops2) = OpDeclSet-diff(Ops1, Ops2) .
	eq OpDeclSet-diff(Ops1, Ops2) = Ops1 [owise] .

	*** Scan the formula tokens to see whether an interval bound is used,
	*** since these operators are likely to introduce name conflicts
	op hasIntervalBound : QidList -> Bool .

	eq hasIntervalBound(nil) = false .
	eq hasIntervalBound('`[ Q QL) = if Q == '`] then hasIntervalBound(QL) else true fi .
	eq hasIntervalBound(Q QL) = hasIntervalBound(QL) [owise] .
endfm
